services:
  web:
    container_name: web
    build: .
    entrypoint: sh ./entrypoint.sh
    volumes:
      - static:/media/static
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 80M
    depends_on:
      db:
        condition: service_healthy
      celery:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery:
    container_name: celery
    build: .
    command: sh -c "cd app && celery -A app.celery worker -l INFO"
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 100M
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  db:
    container_name: db
    image: postgres:16.4-alpine3.20
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 50M
    volumes:
      - ./deploy/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U$$POSTGRES_USER -d$$POSTGRES_DB"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  nginx: 
    container_name: nginx
    build: deploy/nginx
    ports:
      - '80:80'
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 10M
    volumes:
      - static:/media/static
    depends_on:
      - web
    restart: unless-stopped

  redis:
    container_name: redis
    build: deploy/redis
    command: redis-server redis.conf
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 10M
    volumes:
      - ./deploy/redis:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  rabbitmq:
    container_name: rabbitmq
    build: deploy/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q status"]
      interval: 1s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 200M
    restart: unless-stopped


volumes:
  static:
  db:
  redis:
